name: Node.js API CI/CD

on:
  push:
    branches: [alviss]
  pull_request:
    branches: [alviss]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    services:
      # Add MongoDB service container for testing
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Lint code
        run: npm run lint || echo "Linting issues found"
        working-directory: ./backend

      - name: Run tests
        run: npm test
        working-directory: ./backend
        env:
          NODE_ENV: production
          MONGODB_URI: mongodb://localhost:27017/test_db
          ENABLE_CLUSTERING: true

  build:
    name: Build and Package
    needs: lint-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Build application
        run: npm run build --if-present
        working-directory: ./backend

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r package*.json server.js app.js config/ controllers/ middlewares/ models/ routes/ utils/ deployment/
          cd deployment && npm ci --production
        working-directory: ./backend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: deployment/
          retention-days: 1

  deploy-development:
    name: Deploy to Development
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: ./deployment

      - name: Deploy to Development Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            mkdir -p ~/app-deployment
            rm -rf ~/app-deployment/*

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "./deployment/*"
          target: "~/app-deployment"
          strip_components: 1

      - name: Start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd ~/app-deployment
            echo "NODE_ENV=development" > .env
            echo "PORT=5000" >> .env
            echo "HOST=localhost" >> .env
            echo "MONGODB_URI=${{ secrets.DEV_MONGODB_URI }}" >> .env
            pm2 delete app-dev || true
            pm2 start server.js --name "app-dev" --env development
            pm2 save

  deploy-production:
    name: Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: ./deployment

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            mkdir -p ~/app-production
            rm -rf ~/app-production/*

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "./deployment/*"
          target: "~/app-production"
          strip_components: 1

      - name: Start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd ~/app-production
            echo "NODE_ENV=production" > .env
            echo "PORT=5000" >> .env
            echo "HOST=0.0.0.0" >> .env
            echo "ENABLE_CLUSTERING=true" >> .env
            echo "MONGODB_URI=${{ secrets.PROD_MONGODB_URI }}" >> .env
            pm2 delete app-prod || true
            pm2 start server.js --name "app-prod" --env production
            pm2 save
  notify:
    name: Send Deployment Notification
    needs: [deploy-development, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
